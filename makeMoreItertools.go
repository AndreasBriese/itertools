// go package itertools
//
// The MIT License (MIT)
// Copyright (c) 2018 Andreas Briese, eduToolbox@Bri-C GmbH, Sarstedt

// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// makeMoreItertools.go
// +build ignore

package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"os"
	"strings"
	"time"
)

const TEMPLATEFILE = "./itertoolsFloat64.go"

var (
	targets = [...]string{
		"int",
		"int64",
		"int32",
		"int16",
		"int8",
		"float32",
		"string",
		"byte",
	}
	header = `// Code generated by github.com/AndreasBriese/itertools; DO NOT EDIT.
// File from command $go generate executed by go:generate in makeMoreItertools.go 
// Timestamp: %v
// 

package itertools`
)

func main() {
	inFle, err := ioutil.ReadFile(TEMPLATEFILE)
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}

	for _, t := range targets {
		thisHeader := fmt.Sprintf(header, time.Now())
		outFle := bytes.Replace(inFle, []byte("FLOAT64"), []byte(strings.ToUpper(t)), -1)
		outFle = bytes.Replace(outFle, []byte("Float64"), []byte(strings.Title(t)), -1)
		outFle = bytes.Replace(outFle, []byte("float64"), []byte(t), -1)
		outFle = bytes.Replace(outFle, []byte("package itertools"), []byte(thisHeader), 1)
		outFleName := strings.Replace(TEMPLATEFILE, "Float64", strings.Title(t), 1)
		out, err := os.Create(outFleName)
		if err != nil {
			fmt.Println(err)
			os.Exit(2)
		}
		_, err = out.Write(outFle)
		if err != nil {
			fmt.Println(err)
			os.Exit(3)
		}
		out.Close()
	}

}
